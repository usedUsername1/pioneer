1. user creates device
pioneer.py --create-security-device -name "device1" -type "fmc"

1.1 database for "device1" is created. the database follows the schema of the SecurityDevice object
1.2 the user needs to specify a connection method. if the security device is an api device, then it will look something like this:
    1.2.a pioneer.py --device "device1" --connect-via "api" --auth "simple/token" --username "username" --secret "secret" --ip "device_ip" --port "device-port"

1.3 at this point, there is a connection established between the program and the device configuration, be it an API or config.

2. user chooses what to import. import all by default if not specified. if, for example, only the security_policies are imported, the dependent obejcts will be imported too!
pioneer.py --device "device1" --import {policy_package|objects|etc...}

3. in the device's database, the tables are filled according to the import option

3.1 at this point, all the device config has been imported. the user can now view the info by using "get" switches
pioneer.py --device "device1" --get-network-object "test_object" -> prints info about "test_object"

4. user creates a project. a database is created accordingly
pioneer.py --create-project "project1"

5. user can now import a device into a project. this import will generate tables inside the project's database. the import will check for duplicates (by name) and inform the user.
let the user choose what should be overwritten by what
make sure you ask the user if he wants to split rules (ping, l7)
upon the import, inform the user about general things he should take into consideration when migrating from imported device to another device
info from the device tables will be copied into the project's database. a new, slightly different format will be used for the target tables (todo: make this more flexible, enable the user to import only specifc parts of the config)
add all info by default
pioneer.py --project "project1" --add --device "device1" --info {policy_package|objects|etc...}

6. user should be able to modify objects (to do in the very long future)
pioneer.py --project "project1" --device "device1" --modify-policy "policy_name" --source-object "src_object" {name|value} --to "new-value"

7. now that both configs are imported and everything is according to the user's liking, he can copy config from device1 to target device. all is migrated if nothing is specified
pioneer.py --project "project1" --migrate --from "device1" --to "device2"

7.1 based on the devices type:
    7.1.a if the target device is a CLI device, a new configuration file will be generated.
    7.1.b if the target device is an API device, everything will be done via an aPI call
    either way, generate a report and inform the user real time

