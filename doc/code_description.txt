the user should never interact with the config of a device or with the device API directly. the user should not be able to make changes on the devices. the user should interact only
with the migration project. all the changes regarding objects and policies must be performed on the migration project. after everything is moved to the migration project,
then the program will be able to execute the migration of the rules.

MMIGRATION PROJECT STUFF:
should there be an "import device" method that will import the configuration of a security device?
should everything be like the MigrationProject? Meaning that everything behind-the-scenes is a database and the objects are used to interact with the databases?
the user should be able to input a list of exactly what he wants to import from the device. import all config by default 
there should also be a "migrate from device A to device B" behavior that migrates from A to B


whenever a user creates a project, a database is created.
there should be a database object, which is part of a project 
all data of the security devices will be stored in the project database
the user should specify the type of security device: Panorama Management Center, Firepower Management Center... etc (more to be added)
based on the security device specified, the program will create the proper security devices objects

the information about policies, objects and so on should be accessible from the security devices objects, and from the migration project object.
from the migration project object, we can retrieve the info by executing queries to the project database

a security device should be able to exist outside a project!


pioneer.py --migrate-security-policy [list] "device1" -to "device2" msg: "migrated the policies and the dependent objects from device1 to device2" 






SECURITY DEVICE STUFF
the security device will have its own database
it will have tables containing:
- info about the device itself (based on the SecurityDevice object)
- info about the objects (unique table for each of the objects)

all the policies should be placed in a policy package, regardless if the device from which they are exctracted supports it or not
if the device from which they are extracted does not support it, then place them in a dummy package

if an import_device method is used, then a database is created

the user will retrieve the info only from the database. do we use the getters to get info from the database or from the device? what functions do we use to write in the database?


DATABASE STUFF
should all objects imported have an UID?

if all the objects will hanve an UID, should the project database contain only references to these UIDs?



by default, all firewall policies and all the firewall objects will be stored in a package.
if the device does not have a package per se, store them in a virtual_package

should tihs be like this? deleting a device will prevent it from being furhter used, but its data will still be present in the project ?

CONSIDERATIONS REGARDING THE SECURITY DEVICES:
- there should be a rule splitter for icmp rules if you plan to migrate from whatever to Palo Alto, because icmp is treated as application
- all the object groups containing icmp should have it removed before migrating to Palo
FMC:
- connection is done using an username and a user password
- connection requires a domain. "Global" is the default domain, the user can change it using the "--domain" switch

PANMC:
- connection is done using a username and an API token associated with that user






python3 pioneer.py --create-security-device "test2" --device-type "fmc-api" --hostname "10.2.193.196" --username "vzlate" --secret ""
python3 pioneer.py --create-security-device 'oro_sfmc' --device-type 'fmc-api' --hostname 'oro-sfmc-01.luxoft.com' --username 'vzlate' --secret ''

DATABASE AND TABLE DESCRIPTIONS
the pioneer_projects, the projects_metadata table and the devices_metadata table should be already created by the time the user uses pioneer
pioneer_projects database:
- it is the landing database, used for initiating connections to postgres
- projects_metadata (project_name, project_devices, description, creation_time): keeps track of all the created projects
- devices_metadata (device_name, device_type, device_description, creation_time): keeps track of all the created security devices 

security_device database:
- contains info about the security device
- general_data table: contains info about the device's general data (name, device type, creation date, etc)